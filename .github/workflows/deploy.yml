name: build-and-deploy

on:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Hello test build
        run: echo "Build job OK"

  deploy:
    needs: build
    runs-on: [self-hosted, rpi4]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply manifests
        env:
          KUBECONFIG: /etc/rancher/k3s/k3s.yaml
          IMAGE: ghcr.io/${{ github.repository_owner }}/cuisinotheque:${{ github.sha }}
        run: |
          # Namespace
          kubectl apply -f k8s/namespace.yaml
          
          # Config & secrets
          kubectl apply -f k8s/config.yaml
          kubectl apply -f k8s/postgres-secret.yaml
          
          # PostgreSQL
          kubectl apply -f k8s/postgres-pvc.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
          
          # Django
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/ingress.yaml
          
          # Met à jour l’image de l’app Django
          kubectl -n cuisinotheque set image deployment/cuisinotheque-web web=$IMAGE || true
          
          # ⚡ Force un redeploy si jamais un ancien pod bloque
          kubectl -n cuisinotheque rollout restart deployment/cuisinotheque-web
          
          # Vérifie que le nouveau déploiement est bien terminé
          kubectl -n cuisinotheque rollout status deployment/cuisinotheque-web --timeout=180s

